apiVersion: v1
kind: Service
metadata:
  name: now-playing-api
  namespace: intranet
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
  selector:
    app: now-playing-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: now-playing-api
  namespace: intranet
  labels:
    app: now-playing-api
spec:
  replicas: 1
  selector:
    matchLabels:
     app: now-playing-api
  template:
    metadata:
      labels:
        app: now-playing-api
    spec:
      # Node Affinity to attract this Deployment's pods to a specific set of worker nodes
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname # Replace this with corresponding worker node label's key
                operator: In
                values:
                - k3s-node-1 # Replace this with corresponding worker node label's value
      containers:
      - name: now-playing-api
        image: cr.local.home.jeffbeagley.com/now-playing-api:${IMAGE_TAG}
        ports:
          - containerPort: 80
        env:
        - name: DIRECTORY
          value: "/mnt/the_hive/media/Movies"
        - name: EXCLUDE_LIST
          value: ".deletedByTMM,test"
        - name: RECENTLY_ADDED_WEIGHT
          value: "5"
        - name: RECENTLY_RELEASED_WEIGHT
          value: "10"
        - name: YEARS_TO_CONSIDER_NEWLY_RELEASED
          value: "2"
        livenessProbe:  # livenessProbe: Checks if the container is running; restarts on failure. This checks if container's services are still running successfully, will restart if not
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe: # readinessProbe: Determines if the container is ready to serve traffic. AKA, this wont be registered with the service until successful
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        startupProbe: # startupProbe: Verifies the application has started up correctly before other probes are activated. No other checks run till this succeeds
          httpGet:
            path: /
            port: 80
          failureThreshold: 30
          periodSeconds: 10